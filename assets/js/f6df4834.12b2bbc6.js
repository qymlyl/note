"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[225],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return t?a.createElement(f,s(s({ref:n},d),{},{components:t})):a.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9899:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={},s=void 0,i={unversionedId:"ethereum/erc20",id:"ethereum/erc20",title:"erc20",description:"\u6982\u8ff0",source:"@site/docs/ethereum/erc20.md",sourceDirName:"ethereum",slug:"/ethereum/erc20",permalink:"/note/ethereum/erc20",draft:!1,tags:[],version:"current",frontMatter:{}},l={},u=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u65b9\u6cd5\u548c\u4e8b\u4ef6",id:"\u65b9\u6cd5\u548c\u4e8b\u4ef6",level:2},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:3},{value:"\u4e8b\u4ef6",id:"\u4e8b\u4ef6",level:3},{value:"\u4ee3\u7801\u793a\u4f8b",id:"\u4ee3\u7801\u793a\u4f8b",level:2},{value:"OpenZeppelin ERC20(\u62bd\u8c61)",id:"openzeppelin-erc20\u62bd\u8c61",level:3},{value:"MyERC20",id:"myerc20",level:3}],d={toc:u},c="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,r.kt)("p",null,"ERC-20\uff08Ethereum Request for Comments 20\uff0c \u5373\u4ee5\u592a\u574a\u610f\u89c1\u5f81\u6c4220\uff09\uff0c\u7531Fabian Vogelsteller \u4e8e2015\u5e7411\u6708\u63d0\u51fa\uff0c\u662f\u4e00\u4e2a\u5141\u8bb8\u5728\u53ea\u80fd\u5408\u7ea6\u4e2d\u5b9e\u65bd\u4ee3\u5e01\u7684\u6807\u51c6\u63a5\u53e3\uff0c\u63d0\u4f9b\u4e86\u8f6c\u79fb\u4ee3\u5e01\u3001\u6388\u6743\u4ee3\u5e01\u7684\u7b49\u529f\u80fd\u3002"),(0,r.kt)("p",null,"ERC-20\u662f\u4e00\u4e2a",(0,r.kt)("strong",{parentName:"p"},"\u540c\u8d28\u5316\u4ee3\u5e01"),"\u7684\u6807\u51c6\uff0c\u5373\u4ea7\u751f\u7684\u6bcf\u4e00\u4e2a\u4ee3\u5e01\u90fd\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\uff08\u7c7b\u578b\u548c\u4ef7\u503c\u4e0a\u5b8c\u5168\u76f8\u540c\uff09\uff0c\u7c7b\u6bd4\u4ee5\u592a\u5e01\u3002"),(0,r.kt)("p",null,"ERC-20\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u529f\u80fd\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4ee3\u5e01\u8f6c\u79fb\uff1a\u5c06\u4ee3\u5e01\u4ece\u4e00\u4e2a\u8d26\u6237\u8f6c\u79fb\u5230\u53e6\u5916\u4e00\u4e2a\u8d26\u6237"),(0,r.kt)("li",{parentName:"ul"},"\u4f59\u989d\u67e5\u8be2\uff1a\u83b7\u53d6\u6307\u5b9a\u8d26\u6237\u7684\u4ee3\u5e01\u4f59\u989d"),(0,r.kt)("li",{parentName:"ul"},"\u603b\u91cf\u67e5\u8be2\uff1a\u83b7\u53d6\u7f51\u7edc\u4e0a\u4ee3\u5e01\u7684\u603b\u53d1\u884c\u91cf"),(0,r.kt)("li",{parentName:"ul"},"\u4ee3\u5e01\u6388\u6743\uff1a\u5c06\u8d26\u6237\u4e2d\u4e00\u5b9a\u7684\u4ee3\u5e01\u91d1\u989d",(0,r.kt)("strong",{parentName:"li"},"\u6388\u6743"),"\u7ed9\u6307\u5b9a\u7684\u8d26\u6237\u4f7f\u7528")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u548c\u4e8b\u4ef6"},"\u65b9\u6cd5\u548c\u4e8b\u4ef6"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"EIP-20"),"\u4e2d\u5b9a\u4e49\u4e86\u4ee3\u5e01\u5408\u7ea6\u6240\u9700\u7684\u65b9\u6cd5\u548c\u4e8b\u4ef6\uff0c\u5982\u679c\u667a\u80fd\u5408\u7ea6\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u7684\u65b9\u6cd5\u548c\u65f6\u95f4\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3aERC-20\u4ee3\u5e01\u5408\u7ea6\u3002"),(0,r.kt)("h3",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function name() public view returns (string)\nfunction symbol() public view returns (string)\nfunction decimals() public view returns (uint8)\nfunction totalSupply() public view returns (uint256)\nfunction balanceOf(address _owner) public view returns (uint256 balance)\nfunction transfer(address _to, uint256 _value) public returns (bool success)\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\nfunction approve(address _spender, uint256 _value) public returns (bool success)\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining)\n")),(0,r.kt)("h3",{id:"\u4e8b\u4ef6"},"\u4e8b\u4ef6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event Transfer(address indexed _from, address indexed _to, uint256 _value)\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n")),(0,r.kt)("h2",{id:"\u4ee3\u7801\u793a\u4f8b"},"\u4ee3\u7801\u793a\u4f8b"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol"},"ERC20\u63a5\u53e3\u5b9a\u4e49")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"},"OpenZeppelin Solidity ERC20 \u5b9e\u73b0")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/zh/developers/tutorials/erc20-annotated-code"},"\u4ee3\u7801\u6982\u89c8")),(0,r.kt)("h3",{id:"openzeppelin-erc20\u62bd\u8c61"},"OpenZeppelin ERC20(\u62bd\u8c61)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\nimport {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";\nimport {Context} from "@openzeppelin/contracts/utils/Context.sol";\nimport {IERC20Errors} from "@openzeppelin/contracts/interfaces/draft-IERC6093.sol";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\'t required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\'s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``\'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\n')),(0,r.kt)("h3",{id:"myerc20"},"MyERC20"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract GLDToken is ERC20 {\n    constructor(string memory name, string memory symbol, uint256 initialSupply) ERC20(name, symbol) {\n        _mint(msg.sender, initialSupply);\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'\n# block_info.json\n# "0x0" \u8868\u793a\u83b7\u53d6\u5757\u53f7\u4e3a 0 \u7684\u533a\u5757\uff0c\u5373\u7b2c\u4e00\u4e2a\u533a\u5757\u3002\n# true \u8868\u793a\u540c\u65f6\u83b7\u53d6\u533a\u5757\u4e2d\u7684\u4ea4\u6613\u8be6\u60c5\u3002\ncurl localhost:8545 -X POST --data \'{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1", true],"id":1}\'\n\n# bytecode.json\n# \u83b7\u53d6\u5408\u7ea6\u5b57\u8282\u7801(\u9700\u6307\u5b9a\u533a\u5757\u7f16\u53f7)\ncurl localhost:8545 -X POST --data \'{"jsonrpc":"2.0","method":"eth_getCode","params":["0x5fbdb2315678afecb367f032d93f642f64180aa3", "0x1"],"id":1}\'\n\n\n# tx_debug_trace.json\n# \u6839\u636e\u4ea4\u6613Id\u83b7\u53d6\u4ea4\u6613\u7684tx trace\ncurl localhost:8545 \\\n   -X POST \\\n   -H "Content-Type: application/json" \\\n   --data \'{"method":"debug_traceTransaction","params":["0x60539e24eb7069423d40c980951ab2d5ed01b39a4146ba37332faef368de3188"], "id":1,"jsonrpc":"2.0"}\' >> tx_debug_trace.json\n   \n# tx_info.json\ncurl localhost:8545 -X POST --data \'{"jsonrpc":"2.0","method":"eth_getTransactionByHash","params":["0x60539e24eb7069423d40c980951ab2d5ed01b39a4146ba37332faef368de3188"],"id":1}\'\n\n\n# tx_receipt.json\ncurl localhost:8545 -X POST --data \'{"jsonrpc":"2.0","method":"eth_getTransactionReceipt","params":["0x60539e24eb7069423d40c980951ab2d5ed01b39a4146ba37332faef368de3188"],"id":1}\'\n')))}p.isMDXComponent=!0}}]);